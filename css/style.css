/* O * serve para selecionar todo o documento e seus elementos, definindo propriedades gerais*/
*{
    padding: 0;
    margin: 0; /* Definir margin e padding como zero serve como uma inicialização, um start*/
    box-sizing: border-box; /*O box-sizing também serve como um tipo de inicialização. Ele serve para definir como a largura (width) e altura
    (height) de um elemento vai se comportar. Por padrão, o tamanho de um elemento é calculado incluindo padding (distanciamento interno) 
    e border (borda), o que pode fazer o elemento parecer maior do que ele é. Atribuindo border-box ao box-sizing, é possível solucionar
    isso. Colocando ele aqui, não é necessário repetir em cada elemento*/
    font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;
}

body{
    background-color: rgb(39, 39, 39);
    height: 100vh; /*vh significa view height. View está relacionada a viewport, que é a dimensão da tela de um dispositivo. O vh
    está como 1/100 para a viewport padrão. Ou seja, se a altura da tela é 900px, 1vh é 9px (1% de 900px). O mesmo para vw, que é
    view width. Se a largura da tela é 1200px, 1vh é o mesmo que 12px. Então 100vh serve para adquirir 100% da height (altura) da
    viewport (dimensão da tela no navegador). Isso pode ser feito com a largura também*/
    display: flex; /*Serve para tornar um elemento um flex container, que permite dimensionar elementos filhos em diversas direções
    e orientações. O display flex pode ser entendido como um atributo que define quem deve orientar os elementos filhos dentro do elemento
    pai.*/
}

.placar{
    width: 250px;
    display: flex;
    flex-direction: column;
    justify-content: center;
    margin-left: 50px;
    color: white;
}
.placar > p{
    margin-top: 12px;
}
.placar > #vitoria{
    color: rgb(0, 193, 119);
}


.jogo_memoria{ /*A classe de uma section, chamada com "."(ponto) + nome da classe*/
    width: 640px;
    height: 640px;
    margin: auto;   /*Centraliza o elemento horizontalmente na página*/
    display: flex; 
    flex-wrap: wrap;    /*Permite uma quebra de linha aos elementos filhos da classe jogo_memoria*/
    perspective: 1000px; /*Perspective adiciona um efeito 3D ao elemento, permitindo uma sensação de proximidade-distância
    do elemento em relação ao usuário dependendo do seu tamanho. Quanto menor, maior a sensação de proximidade.*/
}

.carta_jogo{
    background-image: url("/img/img_frente_jogo.jpg");
    background-size: cover;                             /*Editando o background da div que representa uma carta*/
    background-position: center;
    width: calc(20% - 10px);  /*Utilizando calc() para calcular a width e height da div. Aqui ele entende que a largura deve ser 25% - menos 10px, que será a distância entre as div's.*/
    height: calc(25% - 10px); /*A medida corresponde ao total de colunas e linhas que são necessárias. Para cinco colunas, cada div deve preencher 25% do espaço disponível. Totalizando 100% do espaço, menos a distância entre os elementos*/
    margin: 5px;
    /* position: relative; */
    transform: scale(1);
    transform-style: preserve-3d;
    transition: transform .5s;
    box-shadow: 1px 1px 1px rgba(0,0,0,.3);
    border-radius: 4px;
}

.carta_jogo:active{ /*Os dois pontos marca o comportamento do elemento quando pressionado (active)*/
    transform: scale(0.97); /*Transform aplica um efeito 2D ou 3D a um elemento*/
    transition: transform .2s;

}

.carta_jogo.flip{
    transform: rotateY(180deg);
    
}


.frente_carta{
    width: 100%;
    height: 100%;
    position: absolute;
    background: #1C7CCC;
    backface-visibility: hidden;
    border-radius: 4px;
}

.frente_carta{
    transform: rotateY(180deg);
}